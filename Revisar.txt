ASPX

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Edificios.aspx.cs" Inherits="EdicloudV5.Edificios" %>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Edificios</title>
    <style>
        body { margin: 0; overflow: hidden; background-color: white; }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="Scripts/edificio.js?version=<%= DateTime.Now.Ticks %>"></script>
</head>
<body>
    <form id="form1" runat="server">
        <div>
            <asp:DropDownList ID="ddlProjects" runat="server" AutoPostBack="true" OnSelectedIndexChanged="ddlProjects_SelectedIndexChanged">
                <asp:ListItem Text="Seleccionar proyecto" Value="0" />
            </asp:DropDownList>
            <asp:DropDownList ID="ddlBuildings" runat="server" AutoPostBack="true" OnSelectedIndexChanged="ddlBuildings_SelectedIndexChanged">
                <asp:ListItem Text="Seleccionar edificio" Value="0" />
            </asp:DropDownList>
        </div>

        <div id="unitsDiv" runat="server">
            <asp:PlaceHolder ID="unitsPlaceholder" runat="server"></asp:PlaceHolder>
        </div>

    <script>
        // Define the global variable for JSON data
        var unitsPlaceholder = document.getElementById('<%= unitsPlaceholder.ClientID %>');
        var unitsData = [];

        // Actualiza los datos de unidades con la información JSON del servidor
        function updateUnitsData(data) {
            unitsData = data;
            console.log("Units data loaded:", unitsData);
            buildRubikCube();
        }

        // Aquí incluye el script directamente para registrar la llamada a updateUnitsData con los datos JSON
        <% LoadUnits(); %>
    </script>
    </form>
</body>
</html>

CS

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Web.Script.Serialization;

namespace EdicloudV5
{
    public partial class Edificios : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            Page.ClientTarget = "uplevel";
            try
            {
                LoadProjects();
                LoadUnits();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error en Page_Load: " + ex.Message);
            }
        }

        private void LoadProjects()
        {
            string connectionString = ConfigurationManager.ConnectionStrings["Urmeneta"].ConnectionString;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT * FROM Projects";
                SqlCommand command = new SqlCommand(query, connection);

                try
                {
                    SqlDataReader reader = command.ExecuteReader();

                    ddlProjects.DataSource = reader;
                    ddlProjects.DataTextField = "ProjectName";
                    ddlProjects.DataValueField = "ProjectID";
                    ddlProjects.DataBind();

                    reader.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error en LoadProjects query: " + ex.Message);
                }
            }
        }

        private void LoadBuildings(int projectID)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["Urmeneta"].ConnectionString;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT * FROM Buildings WHERE ProjectID = @ProjectID";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@ProjectID", projectID);

                try
                {
                    SqlDataReader reader = command.ExecuteReader();

                    ddlBuildings.DataSource = reader;
                    ddlBuildings.DataTextField = "BuildingName";
                    ddlBuildings.DataValueField = "BuildingID";
                    ddlBuildings.DataBind();

                    reader.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error en LoadBuildings query: " + ex.Message);
                }
            }
        }

        protected void ddlProjects_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                int selectedProjectID = Convert.ToInt32(ddlProjects.SelectedValue);
                LoadBuildings(selectedProjectID);
            }
            catch (Exception ex)
            {
                // Manejo de excepciones: puedes registrar el error, mostrar un mensaje de error al usuario, etc.
                Console.WriteLine("Error in ddlProjects_SelectedIndexChanged: " + ex.Message);
            }
        }

        protected void ddlBuildings_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                LoadUnits();
            }
            catch (Exception ex)
            {
                // Manejo de excepciones: puedes registrar el error, mostrar un mensaje de error al usuario, etc.
                Console.WriteLine("Error in ddlBuildings_SelectedIndexChanged: " + ex.Message);
            }
        }


        protected void LoadUnits()
        {
            string connectionString = ConfigurationManager.ConnectionStrings["Urmeneta"].ConnectionString;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT [DepartmentID] ,[BuildingID] ,[Floor] ,[PositionX] ,[PositionY] ,[PositionZ] ,[Orientation] ,[SaleStatus] ,CONVERT(INT,[MinPrice]) AS [MinPrice] ,CONVERT(INT,[InitialPrice]) AS [InitialPrice] ,CONVERT(INT,[CurrentPrice]) AS [CurrentPrice] FROM [UMT_017_Urmeneta].[dbo].[Departments] where [BuildingID] = 3"; // Modifica esta consulta según tus necesidades
                SqlCommand command = new SqlCommand(query, connection);

                try
                {
                    SqlDataReader reader = command.ExecuteReader();

                    List<UnitData> unitsData = new List<UnitData>();

                    while (reader.Read())
                    {
                        UnitData unit = new UnitData();

                        unit.Floor = Convert.ToInt32(reader["Floor"]);
                        unit.PositionX = Convert.ToInt32(reader["PositionX"]);
                        unit.PositionY = Convert.ToInt32(reader["PositionY"]);
                        unit.PositionZ = Convert.ToInt32(reader["PositionZ"]);
                        unit.Orientation = reader["Orientation"].ToString();
                        unit.SaleStatus = reader["SaleStatus"].ToString();
                        unit.MinPrice = Convert.ToDecimal(reader["MinPrice"]);
                        unit.InitialPrice = Convert.ToDecimal(reader["InitialPrice"]);
                        unit.CurrentPrice = Convert.ToDecimal(reader["CurrentPrice"]);

                        unitsData.Add(unit);
                    }

                    reader.Close();

                    var serializer = new JavaScriptSerializer();
                    string unitsJson = serializer.Serialize(unitsData);
                    Console.WriteLine("Generated JSON:", unitsJson);
                    string script = $"updateUnitsData({unitsJson});";
                    Page.ClientScript.RegisterStartupScript(this.GetType(), "UpdateUnitsDataScript", script, true);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error en LoadUnits query: " + ex.Message);
                }
            }
        }
    }

    // Definir la clase UnitData fuera de la clase Edificios
    public class UnitData
    {
        public int Floor { get; set; }
        public int PositionX { get; set; }
        public int PositionY { get; set; }
        public int PositionZ { get; set; } // Agrega PositionZ
        public string Orientation { get; set; }
        public string SaleStatus { get; set; }
        public decimal MinPrice { get; set; }
        public decimal InitialPrice { get; set; }
        public decimal CurrentPrice { get; set; }

    }
}


JS

var unitsData = []; // Initialize unitsData as an empty array
var scene; // Define the scene variable
var cubes = [];
var raycaster = new THREE.Raycaster();
var mouse = new THREE.Vector2();
var isDragging = false;
var previousMousePosition = { x: 0, y: 0 };
var spacing;

// Inicializa la escena, cámara y renderer

function updateUnitsData(data) {
    console.log("Received JSON data:", data); // Agrega este mensaje para verificar los datos recibidos
    try {
        unitsData = JSON.parse(data);
        console.log("Units data updated:", unitsData);
        if (scene) {
            buildRubikCube(); // Call buildRubikCube only if scene is defined
        }
    } catch (error) {
        console.error("Error parsing JSON:", error);
    }
}


function init() {
    console.log("Initializing scene...");
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 10, 40);

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);

    renderer.setClearColor(0xffffff); // Establece el color blanco de fondo

    renderer.domElement.addEventListener('mousemove', onMouseMove);
    renderer.domElement.addEventListener('mousedown', onMouseDown);

    document.addEventListener('mouseup', onMouseUp);

    document.body.appendChild(renderer.domElement);

    spacing = 1.1;
    camera.lookAt(scene.position);

    animate();
}


// Animación del renderizado
function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}

function getCubeColor(saleStatus) {
    switch (saleStatus) {
        case 'Libre':
            return 0x00ff00; // Color verde para unidades disponibles
        case 'Vendido':
            return 0xff9900; // Color naranja para unidades reservadas
        case 'Bloqueado':
            return 0xff0000; // Color rojo para unidades vendidas
        default:
            return 0x808080; // Color gris por defecto
    }
}

function buildRubikCube() {
    console.log("Building Rubik's Cube...");

    const cubeSize = 1;

    cubes.forEach(cube => {
        scene.remove(cube);
    });
    cubes = [];

    const groupedDepartments = {};
    unitsData.forEach(unit => {
        const buildingFloor = `${unit.BuildingID}-${unit.PositionZ}`;
        if (!groupedDepartments[buildingFloor]) {
            groupedDepartments[buildingFloor] = [];
        }
        groupedDepartments[buildingFloor].push(unit);
    });

    let buildingWidth = 0;
    let buildingLength = 0;

    Object.values(groupedDepartments).forEach(departmentGroup => {
        buildingWidth = Math.max(buildingWidth, departmentGroup.reduce((max, unit) => unit.PositionY, 0) + 1);
        buildingLength = Math.max(buildingLength, departmentGroup.reduce((max, unit) => unit.PositionX, 0) + 1);

        console.log("Building cubes for department group:", departmentGroup);

        const cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
        departmentGroup.forEach(unit => {
            const cubeColor = getCubeColor(unit.SaleStatus);
            console.log("Cube color for unit:", cubeColor);

            const cubeMaterial = new THREE.MeshBasicMaterial({ color: cubeColor });

            const x = (unit.PositionX - buildingLength / 2) * spacing;
            const y = (buildingLength / 2 - unit.PositionY) * spacing + cubeSize / 2;
            const z = (buildingWidth / 2 - unit.PositionZ) * spacing;

            console.log("Cube position for unit:", x, y, z);

            const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.set(x, y, z);
            cubes.push(cube);
            scene.add(cube);

            console.log("Adding cube to scene:", cube);

            cube.userData = {
                floor: unit.PositionZ,
                positionX: unit.PositionX,
                positionY: unit.PositionY,
                positionZ: unit.PositionZ,
                orientation: unit.Orientation,
                saleStatus: unit.SaleStatus,
                minPrice: unit.MinPrice,
                initialPrice: unit.InitialPrice,
                currentPrice: unit.CurrentPrice
            };

            console.log("Setting user data for cube:", cube.userData);

            cube.addEventListener('click', () => handleCubeClick(cube));

            console.log("Adding click event listener to cube:", cube);
        });
    });

    buildGround(buildingWidth, buildingLength);
    console.log("Rubik's Cube built!");
}







// Construye el suelo
function buildGround(buildingWidth, buildingLength) {
    const groundWidth = (buildingWidth + 2) * spacing; // Tamaño del suelo con cubos extra en ancho
    const groundLength = (buildingLength + 2) * spacing; // Tamaño del suelo con cubos extra en largo
    const cubeSize = spacing; // Tamaño de los cubos del suelo

    for (let x = -groundLength / 2; x <= groundLength / 2; x += cubeSize) {
        for (let z = -groundWidth / 2; z <= groundWidth / 2; z += cubeSize) {
            const cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);
            const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0x808080 }); // Color gris claro para los cubos del suelo

            const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.set(x, -spacing * buildingLength / 2 - cubeSize / 2, z); // Ajusta la posición vertical del cubo del suelo
            scene.add(cube);
        }
    }
}

// Función para manejar el clic en un cubo
function handleCubeClick(cube) {
    console.log("Clicked cube data:", cube.userData);
    // Aquí puedes realizar acciones al hacer clic en un cubo, por ejemplo, mostrar información sobre la unidad
    const floor = cube.userData.floor;
    const positionX = cube.userData.positionX;
    const positionY = cube.userData.positionY;
    const orientation = cube.userData.orientation;
    const price = cube.userData.price;
    const state = cube.userData.state;

    // ... Hacer algo con la información ...
}

// Manejo del evento al presionar el botón del ratón
function onMouseDown(event) {
    console.log("Mouse down event:", event);
    isDragging = true;
    previousMousePosition.x = event.clientX;
    previousMousePosition.y = event.clientY;
}

// Manejo del evento al soltar el botón del ratón
function onMouseUp() {
    console.log("Mouse up event");
    isDragging = false;
}

// Manejo del movimiento del ratón
function onMouseMove(event) {
    console.log("Mouse move event:", event);
    if (!isDragging) return;

    const deltaMove = {
        x: event.clientX - previousMousePosition.x,
        y: event.clientY - previousMousePosition.y
    };

    // Girar la escena en función del movimiento del ratón
    scene.rotation.y += deltaMove.x * 0.01;

    previousMousePosition.x = event.clientX;
    previousMousePosition.y = event.clientY;
}

// Inicializa la escena y comienza la animación al cargar la página
window.onload = function () {
    init();
};